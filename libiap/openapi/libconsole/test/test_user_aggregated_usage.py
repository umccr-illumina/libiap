# coding: utf-8

"""
    Developer Console Service

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import libiap.openapi.libconsole
from libiap.openapi.libconsole.models.user_aggregated_usage import UserAggregatedUsage  # noqa: E501
from libiap.openapi.libconsole.rest import ApiException

class TestUserAggregatedUsage(unittest.TestCase):
    """UserAggregatedUsage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test UserAggregatedUsage
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = libiap.openapi.libconsole.models.user_aggregated_usage.UserAggregatedUsage()  # noqa: E501
        if include_optional :
            return UserAggregatedUsage(
                user = libiap.openapi.libconsole.models.user.User(
                    full_name = '0', 
                    user_name = '0', 
                    domain = libiap.openapi.libconsole.models.domain.Domain(
                        id = '0', 
                        name = '0', ), 
                    type = '0', ), 
                i_credit = 1.337, 
                usages = [
                    libiap.openapi.libconsole.models.product_usage.ProductUsage(
                        type = '0', 
                        amount = 1.337, 
                        unit = '0', 
                        i_credit = 1.337, )
                    ]
            )
        else :
            return UserAggregatedUsage(
        )

    def testUserAggregatedUsage(self):
        """Test UserAggregatedUsage"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
